package com.yodana.utils.log {	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.XMLSocket;	public class Sos {		private static const LOG_ALERT : String = "3_ALERT";		private static const LOG_DEBUG : String = "3_DEBUG";		private static const LOG_ERROR : String = "3_ERROR";		private static const LOG_LOG : String = "3_LOG";		private static const LOG_SYSTEM : String = "3_SYSTEM";		private static const LOG_TAG : String = "3_TAG";		private static const LOG_WARNING : String = "3_WARN";				private static var socket : XMLSocket;		private static var _connected : Boolean = false;		private static var cantconnect : Boolean = false;		private static var connecting : Boolean = false;		private static var buffer : Array;		/**		 * Connects the Log to a localhost SOS Max host 		 */		public static function connect() : void {			if (!_connected && !connecting){				connecting = true;				cantconnect = false;								buffer = [];				socket = new XMLSocket();		        socket.addEventListener(Event.CONNECT, onConnect);				socket.addEventListener(IOErrorEvent.IO_ERROR, onError);				socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);				try {					socket.connect("localhost", 4444);				} catch (error : SecurityError) {					cantconnect = true;					connecting = false;					trace("SecurityError in SOSAppender: " + error);				}			}		}				/**		 * Alert the message as an 'alert' entry in the SOS Host 		 * @param msg Message to be logged		 * @param filter		 */		public static function alert(msg : *, filter : String) : void {			send(msg, filter, LOG_ALERT);		}		/**		 * Debug the message as a 'debug' entry in the SOS Host 		 * @param msg Message to be logged		 * @param filter		 */		public static function debug(msg : *, filter : String = null) : void {			send(msg, filter, LOG_DEBUG);		}		/**		 * Error the message as an 'error' entry in the SOS Host 		 * @param msg - Message to be logged		 * @param filter		 */		public static function error(msg : *, filter : String = null) : void {			send(msg, filter, LOG_ERROR);		}		/**		 * Log the message as a 'log' entry in the SOS Host		 * @param msg Message to be logged		 * @param filter		 */		public static function log(msg : *, filter : String = null) : void {			send(msg, filter, LOG_LOG);		}		/**		 * Mark the message as a 'system' entry in the SOS Host 		 * @param msg - Message to be logged		 * @param filter		 */		public static function system(msg : *, filter : String = null) : void {			send(msg, filter, LOG_SYSTEM);		}		/**		 * Tag the message as a 'tag' entry in the SOS Host 		 * @param msg Message to be logged		 * @param filter		 */		public static function tag(msg : *, filter : String = null) : void {			send(msg, filter, LOG_TAG);		}		/**		 * Warning the message as a 'warning' entry in the SOS Host 		 * @param msg Message to be logged		 * @param filter		 */		public static function warning(msg : *, filter : String = null) : void {			send(msg, filter, LOG_WARNING);		}				private static function onError(event : Event) : void {			connected = false;			connecting = false;			cantconnect = true;						trace("Error connecting to SOS Max!\n\tevent: " + event);		}		private static function onConnect(event : Event) : void {			socket.send("SOS AS3 connected!");			connected = true;			connecting = false;			cantconnect = false;			if (buffer.length > 0){				for (var i : Number = 0; i < buffer.length; i++) {					var message : LogEntry = buffer[i];					send(message.message, message.filter, message.key);				}				buffer = [];			}		}				private static function get connected() : Boolean {			if (!connecting && !cantconnect) connect();			return _connected;		}		private static function set connected(value : Boolean) : void {			_connected = value;		}		private static function send(msg : *, filter : String, key : String = LOG_LOG) : void {			// Ensure the filter isn't null			if (filter == null) filter = "";						if (cantconnect){				trace("{" + key + "}#" + filter + "# " + msg);			} else if (! connected){				buffer.push(new LogEntry(msg, filter, key));			} else {				socket.send("!SOS<showMessage key='" + key + "'><![CDATA[" + filter + "# " + msg + "]]></showMessage>");			}		}	}}class LogEntry {	public var message : String;	public var filter : String;	public var key : String;	public function LogEntry(m : String, f : String, k : String) {		message = m; filter = f; key = k;	}}